# -*- coding: utf-8 -*-

# Author: Fahad Ali
# Date:   7/29/2022
# Name:   ClipboardManager

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.Qt import QApplication
import os, sys
from functions import getEmails
from urlextract import URLExtract


class Ui_ClipboardManager(object):
    def setupUi(self, ClipboardManager):
        ClipboardManager.setObjectName("ClipboardManager")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons/clipboard-manager.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        ClipboardManager.setWindowIcon(icon)
        ClipboardManager.resize(400, 300)
        ClipboardManager.setStyleSheet("background-color: rgb(254, 219, 208);border-radius:10px;")
        self.centralwidget = QtWidgets.QWidget(ClipboardManager)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(140, 0, 110, 30))
        font = QtGui.QFont()
        font.setFamily("Impact")
        font.setPointSize(20)
        self.label.setFont(font)
        self.label.setStyleSheet("color: rgb(68, 44, 46);")
        self.label.setObjectName("label")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit.setGeometry(QtCore.QRect(20, 40, 361, 211))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        self.plainTextEdit.setFont(font)
        self.plainTextEdit.setStyleSheet("background-color: rgb(254, 234, 230);\n"
"color: rgb(68, 44, 46);")
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.plainTextEdit.setReadOnly(True)
        ClipboardManager.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(ClipboardManager)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 400, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuHistory = QtWidgets.QMenu(self.menubar)
        self.menuHistory.setObjectName("menuHistory")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        ClipboardManager.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(ClipboardManager)
        self.statusbar.setObjectName("statusbar")
        ClipboardManager.setStatusBar(self.statusbar)
        self.actionEmail_Extractor = QtWidgets.QAction(ClipboardManager)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons/webmail.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionEmail_Extractor.setIcon(icon)
        self.actionEmail_Extractor.setObjectName("actionEmail_Extractor")
        self.actionEmail_Extractor.triggered.connect(self.emailExtractor)
        self.actionURL_Extractor = QtWidgets.QAction(ClipboardManager)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icons/url.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionURL_Extractor.setIcon(icon1)
        self.actionURL_Extractor.setObjectName("actionURL_Extractor")
        self.actionURL_Extractor.triggered.connect(self.urlExtractor)
        self.actionExit = QtWidgets.QAction(ClipboardManager)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("icons/exit.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionExit.setIcon(icon2)
        self.actionExit.setObjectName("actionExit")
        self.actionExit.triggered.connect(ClipboardManager.close)
        self.actionNew = QtWidgets.QAction(ClipboardManager)
        iconNew = QtGui.QIcon()
        iconNew.addPixmap(QtGui.QPixmap("icons/new.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionNew.setIcon(iconNew)
        self.actionNew.setObjectName("actionNew")
        self.actionNew.triggered.connect(self.newClipboard)      
        self.actionAbout = QtWidgets.QAction(ClipboardManager)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("icons/about.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAbout.setIcon(icon3)
        self.actionAbout.setObjectName("actionAbout")
        self.actionAbout.triggered.connect(self.about)
        self.actionCheck_History = QtWidgets.QAction(ClipboardManager)
        iconCheck_History = QtGui.QIcon()
        iconCheck_History.addPixmap(QtGui.QPixmap("icons/history.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionCheck_History.setIcon(iconCheck_History)
        self.actionCheck_History.setObjectName("actionCheck_History")
        self.actionClear_History = QtWidgets.QAction(ClipboardManager)
        self.actionCheck_History.triggered.connect(self.checkHistory)
        iconClear_History = QtGui.QIcon()
        iconClear_History.addPixmap(QtGui.QPixmap("icons/clear-history.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionClear_History.setIcon(iconClear_History)
        self.actionClear_History.setObjectName("actionClear_History")
        self.actionClear_History.triggered.connect(self.clearHistory)
        self.menuFile.addAction(self.actionNew)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionEmail_Extractor)
        self.menuFile.addAction(self.actionURL_Extractor)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuHelp.addAction(self.actionAbout)
        self.menuHistory.addAction(self.actionCheck_History)
        self.menuHistory.addAction(self.actionClear_History)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuHistory.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(ClipboardManager)
        QtCore.QMetaObject.connectSlotsByName(ClipboardManager)
        
        QApplication.clipboard().dataChanged.connect(self.getClipboardData)

    def retranslateUi(self, ClipboardManager):
        _translate = QtCore.QCoreApplication.translate
        ClipboardManager.setWindowTitle(_translate("ClipboardManager", "Clipboard Manager"))
        self.label.setText(_translate("ClipboardManager", "Clipboard"))
        self.menuFile.setTitle(_translate("ClipboardManager", "File"))
        self.menuHistory.setTitle(_translate("ClipboardManager", "History"))
        self.menuHelp.setTitle(_translate("ClipboardManager", "Help"))
        self.actionEmail_Extractor.setText(_translate("ClipboardManager", "Email Extractor"))
        self.actionEmail_Extractor.setShortcut(_translate("ClipboardManager", "Ctrl+Shift+E"))
        self.actionURL_Extractor.setText(_translate("ClipboardManager", "URL Extractor"))
        self.actionURL_Extractor.setShortcut(_translate("ClipboardManager", "Ctrl+Shift+U"))
        self.actionExit.setText(_translate("ClipboardManager", "Exit"))
        self.actionExit.setShortcut(_translate("ClipboardManager", "Ctrl+Q, Alt+F4"))
        self.actionAbout.setText(_translate("ClipboardManager", "About"))
        self.actionAbout.setShortcut(_translate("ClipboardManager", "Ctrl+Shift+I"))
        self.actionNew.setText(_translate("ClipboardManager", "New"))
        self.actionNew.setShortcut(_translate("ClipboardManager", "Ctrl+N"))
        self.actionCheck_History.setText(_translate("ClipboardManager", "Check History"))
        self.actionCheck_History.setShortcut(_translate("ClipboardManager", "Ctrl+H"))
        self.actionClear_History.setText(_translate("ClipboardManager", "Clear History"))
        self.actionClear_History.setShortcut(_translate("ClipboardManager", "Ctrl+Shift+H"))
        
    def getClipboardData(self):
        text = QApplication.clipboard().text()
        saved = set()
        exists = os.path.isfile('ClipboardData.list')
        if exists:
            f = open('ClipboardData.list', 'r')
            for data in f.readlines():
                saved.add(data.strip())
            f.close()
        if (not text.strip(' \r\n') in saved):
            self.plainTextEdit.insertPlainText(text.strip(' \r\n')+'\n')
            saved.add(text.strip(' \r\n'))
        f = open('ClipboardData.list', 'w')
        for text in saved:
            f.write(text+'\n')
        f.close()
        
    def checkHistory(self):
        exists = os.path.isfile('ClipboardData.list')
        # saved = set()
        if exists:
            f = open('ClipboardData.list', 'r')
            for data in f.readlines():
                self.plainTextEdit.appendPlainText(data.strip())
            f.close()
            # for text in saved:
            #     self.plainTextEdit.setPlainText(text+'\n')
        else:
            font = QtGui.QFont()
            font.setFamily("MS Reference Sans Serif")
            font.setPointSize(10)
            msg = QtWidgets.QMessageBox()
            msg.setFont(font)
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap("icons/error.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            msg.setWindowIcon(icon)
            msg.setText("History is empty.")
            msg.setWindowTitle("Error")
            msg.exec_()
            
    def clearHistory(self):
        exists = os.path.isfile('ClipboardData.list')
        if exists:
            os.remove('ClipboardData.list')
            self.plainTextEdit.clear()
            font = QtGui.QFont()
            font.setFamily("MS Reference Sans Serif")
            font.setPointSize(10)
            msg = QtWidgets.QMessageBox()
            msg.setFont(font)
            msg.setIcon(QtWidgets.QMessageBox.Information)
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap("icons/about.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            msg.setWindowIcon(icon)
            msg.setText("History is cleared.")
            msg.setWindowTitle("Information")
            msg.exec_()
        else:
            font = QtGui.QFont()
            font.setFamily("MS Reference Sans Serif")
            font.setPointSize(10)
            msg = QtWidgets.QMessageBox()
            msg.setFont(font)
            msg.setIcon(QtWidgets.QMessageBox.Information)
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap("icons/about.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            msg.setWindowIcon(icon)
            msg.setText("History is already Empty.")
            msg.setWindowTitle("Information")
            msg.exec_()
            
    def newClipboard(self):
        self.plainTextEdit.clear()
        
    def emailExtractor(self):
        text = self.plainTextEdit.toPlainText()
        got_emails = getEmails(text.strip( ' \r\n'))
        exists = os.path.isfile('emails.txt')
        if not got_emails == set():
            if exists:
                f = open('emails.txt', 'a')
            else:
                f = open('emails.txt', 'w')
            for email in got_emails:
                f.write(email+'\n')
            f.close()
            font = QtGui.QFont()
            font.setFamily("MS Reference Sans Serif")
            font.setPointSize(10)
            msg = QtWidgets.QMessageBox()
            msg.setFont(font)
            msg.setIcon(QtWidgets.QMessageBox.Information)
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap("icons/about.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            msg.setWindowIcon(icon)
            msg.setText("Emails extracted successfully.")
            msg.setWindowTitle("Successful")
            msg.exec_()
        else:
            font = QtGui.QFont()
            font.setFamily("MS Reference Sans Serif")
            font.setPointSize(10)
            msg = QtWidgets.QMessageBox()
            msg.setFont(font)
            msg.setIcon(QtWidgets.QMessageBox.Information)
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap("icons/about.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            msg.setWindowIcon(icon)
            msg.setText("No email is found.")
            msg.setWindowTitle("Information")
            msg.exec_()
            
    def urlExtractor(self):
        text = self.plainTextEdit.toPlainText()
        extractor = URLExtract()
        got_urls = extractor.find_urls(text.strip( ' \r\n'))
        exists = os.path.isfile('urls.txt')
        if not got_urls == set():
            if exists:
                f = open('urls.txt', 'a')
            else:
                f = open('urls.txt', 'w')
            for url in got_urls:
                f.write(url+'\n')
            f.close()
            font = QtGui.QFont()
            font.setFamily("MS Reference Sans Serif")
            font.setPointSize(10)
            msg = QtWidgets.QMessageBox()
            msg.setFont(font)
            msg.setIcon(QtWidgets.QMessageBox.Information)
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap("icons/about.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            msg.setWindowIcon(icon)
            msg.setText("URLs extracted successfully.")
            msg.setWindowTitle("Successful")
            msg.exec_()
        else:
            font = QtGui.QFont()
            font.setFamily("MS Reference Sans Serif")
            font.setPointSize(10)
            msg = QtWidgets.QMessageBox()
            msg.setFont(font)
            msg.setIcon(QtWidgets.QMessageBox.Information)
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap("icons/about.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            msg.setWindowIcon(icon)
            msg.setText("No URL is found.")
            msg.setWindowTitle("Information")
            msg.exec_()
            
    def about(self):
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        msg = QtWidgets.QMessageBox()
        msg.setFont(font)
        msg.setIcon(QtWidgets.QMessageBox.Information)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons/about.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        msg.setWindowIcon(icon)
        msg.setText("Software Features:\n1) It copies everything from the clipboard.\n2) You can extract emails into the (emails.txt) file from the copied text.\n3) You can extract URLs into the (urls.txt) file from the copied text.\n4) It stores history, So you don't have to lose anything you copy ever.\n5) You can clear history at any time.\n\nSoftware is made for personal use only.\n\nClipboard Manager 1.0 Copyright (c) 2022, Fahad Ali")
        msg.setWindowTitle("About US")
        msg.exec_()
            
            


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    ClipboardManager = QtWidgets.QMainWindow()
    ui = Ui_ClipboardManager()
    ui.setupUi(ClipboardManager)
    ClipboardManager.show()
    sys.exit(app.exec_())
